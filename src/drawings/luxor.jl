# module Bach

# from Luxor/src/animate.jl  animate
function animate_gif(g::SimpleDiGraph,
                     movie::Movie,
                     scenelist::Vector{Scene} ;
                     creategif = false,
                     createmovie = false,
                     framerate = 30,
                     pathname = "",
                     tempdirectory = "",
                     usenewffmpeg = true,
                     debug = false)
    if 0 >= framerate
        framerate = 1
    end
    # error if pathname is directory
    if isdir(pathname)
        suggestedpathname = joinpath(pathname, "myanimation.gif or mp4 or mkv")
        @error("Parameter pathname=$pathname points to a directory. Please pass a filename like '$suggestedpathname' as pathname parameter!")
        return false
    end

    if tempdirectory == ""
        tempdirectory = mktempdir()
    else
        if !isdir(tempdirectory)
            @info "$(tempdirectory) does not exist, using an autogenerated one."
            tempdirectory = mktempdir()
        end
    end
    debug && @info("Frames for animation \"$(movie.movietitle)\" are being stored in directory: \n\t $(tempdirectory)")
    filecounter = 1
    if isempty(scenelist)
        Drawing(movie.width, movie.height, "$(tempdirectory)/$(lpad(filecounter, 10, "0")).png")
        origin()
        finish()
    else
        rangelist = 0:-1
        for scene in scenelist
            rangelist = vcat(rangelist, collect(scene.framerange))
        end
        rangelist = unique(rangelist) # remove shared frames
        if rangelist[end] < movie.movieframerange.stop
            # @warn("Movie framerange is longer than scene frame range: \n\t $(movie.movieframerange) > $(rangelist[end])")
        end
        for currentframe in rangelist[1]:rangelist[end]
            Drawing(movie.width, movie.height, "$(tempdirectory)/$(lpad(filecounter, 10, "0")).png")
            origin()
            # this frame needs doing, see if each of the scenes defines it
            for scene in scenelist
                if currentframe in scene.framerange
                    scene.framefunction(g, scene, currentframe)
                end
            end
            finish()
            filecounter += 1
        end
        debug && @info("... $(filecounter-1) frames saved in directory:\n\t $(tempdirectory)")
    end

    if creategif == false && createmovie == false
        @info "to create a GIF or a movie, use `creategif = true` or `createmovie=true`."
        return true # we're done
    end

    # # we could do both I suppose, but if not:
    # if creategif == true && createmovie == true
    #     throw(error("animate() - GIF or Movie?"))
    # end

    ### gif creation?

    if creategif == true
        # the FFMPEG commands create a palette and then create an animated GIF from the resulting images
        if !usenewffmpeg
            # old version of ffmpeg up to 2.1.3
            # these two commands create a palette and then an animated GIF from the resulting images using the palette
            Luxor.FFMPEG.exe(`-loglevel panic -f image2 -i $(tempdirectory)/%10d.png -vf palettegen -y $(tempdirectory)/$(movie.movietitle)-palette.png`)
            Luxor.FFMPEG.exe(`-loglevel panic -framerate $(framerate) -f image2 -i $(tempdirectory)/%10d.png -i $(tempdirectory)/$(movie.movietitle)-palette.png -lavfi paletteuse -y $(tempdirectory)/$(movie.movietitle).gif`)
        else
            @debug "we're running bundled FFMPEG", Luxor.FFMPEG.exe("-version")
            # the latest version of ffmpeg uses built-in palettes and allegedly does transparency using complex filters ¯\\\_(ツ)_/¯
            if debug
                @info "$(framerate)"
                @info "$(tempdirectory)"
                @info "$(tempdirectory)/$(movie.movietitle).gif"
                Luxor.FFMPEG.exe(`-r $(framerate) -f image2 -i $(tempdirectory)/%10d.png -filter_complex "[0:v] split [a][b]; [a] palettegen=stats_mode=full:reserve_transparent=on:transparency_color=FFFFFF [p]; [b][p] paletteuse=new=1:alpha_threshold=128" -y $(tempdirectory)/$(movie.movietitle).gif`)
            else
                # reduce verbosity !
                Luxor.FFMPEG.exe(`-loglevel panic -r $(framerate) -f image2 -i $(tempdirectory)/%10d.png -filter_complex "[0:v] split [a][b]; [a] palettegen=stats_mode=full:reserve_transparent=on:transparency_color=FFFFFF [p]; [b][p] paletteuse=new=1:alpha_threshold=128" -y $(tempdirectory)/$(movie.movietitle).gif`)
            end
        end

        if !isempty(pathname)
            targetdir, movieformat = splitext(pathname)
            if movieformat != ".gif"
                pathname = targetdir * ".gif"
                movieformat = ".gif"
            end
            mv("$(tempdirectory)/$(movie.movietitle).gif", pathname, force = true)
            debug && @info("GIF is: $pathname")
            giffn = pathname
        else
            debug && @info("GIF is: $(tempdirectory)/$(movie.movietitle).gif")
            giffn = tempdirectory * "/" * movie.movietitle * ".gif"
        end
        return Luxor.AnimatedGif(giffn)
    end

    ## movie creation?

    if createmovie == true
        if pathname == ""
            # default to mkv
            pathname = tempdirectory * "/" * movie.movietitle * ".mkv"
        end
        targetdir, movieformat = splitext(pathname)
        if movieformat ∉ [".mkv", ".mp4", ".webm"]
            @info "using default movie format .mkv"
            movieformat = ".mkv"
            pathname = targetdir * movieformat
        end
        _make_video(movieformat, pathname, framerate, tempdirectory)
        return true
    end
end

# module Bach
